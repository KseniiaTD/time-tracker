/*
 * People info
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"math/rand/v2"
	"net/http"
	"strconv"
	"sync"
)

var once sync.Once
var Surname_m []string
var Name_m []string
var Patronymic_m []string
var Surname_w []string
var Name_w []string
var Patronymic_w []string
var Address_city []string
var Address_street []string

func InfoGet(w http.ResponseWriter, r *http.Request) {

	once.Do(createList)

	person := getUserData()
	data, err := json.Marshal(person)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(data)
}

func getUserData() People {
	gender := rand.IntN(2)
	person := People{}
	if gender == 0 {
		fmt.Printf("women name = %d, surname = %d, p = %d", len(Name_w), len(Surname_w), len(Patronymic_w))
		person.Name = Name_w[rand.IntN(len(Name_w))]
		person.Surname = Surname_w[rand.IntN(len(Surname_w))]
		person.Patronymic = Patronymic_w[rand.IntN(len(Patronymic_w))]
	} else {
		fmt.Printf("men name = %d, surname = %d, p = %d", len(Name_m), len(Surname_m), len(Patronymic_m))
		person.Name = Name_m[rand.IntN(len(Name_m))]
		person.Surname = Surname_m[rand.IntN(len(Surname_m))]
		person.Patronymic = Patronymic_m[rand.IntN(len(Patronymic_m))]
	}

	house := strconv.Itoa(rand.IntN(100) + 1)

	flat := strconv.Itoa(rand.IntN(300) + 1)

	fmt.Printf("address_city = %d, street = %d", len(Address_city), len(Address_street))
	person.Address = Address_city[rand.IntN(len(Address_city))] + ", " +
		Address_street[rand.IntN(len(Address_street))] + ", " +
		house + ", " + flat

	return person
}

func createList() {
	Name_m = []string{"Михаил", "Александр", "Сергей", "Вадим", "Дмитрий", "Евгений", "Павел", "Денис", "Олег", "Максим"}
	Surname_m = []string{"Иванов", "Степнов", "Семенов", "Луков", "Кофман", "Пирогов", "Васильков", "Степченко", "Кравцов", "Альшевский"}
	Patronymic_m = []string{"Иванович", "Романович", "Григорьевич", "Викторович", "Андреевич", "Алексеевич", "Никитич", "Игоревич", "Петрович", "Константинович"}

	Name_w = []string{"Анна", "Василиса", "Марина", "Наталья", "Светлана", "Ольга", "Лидия", "Елена", "Варвара", "Дарья"}
	Surname_w = []string{"Ковалевская", "Ветрова", "Ольховская", "Алтуфьева", "Калинина", "Смирнова", "Некрасова", "Петрова", "Римская", "Левина"}
	Patronymic_w = []string{"Максимовна", "Павловна", "Алексеевна", "Витальевна", "Викторовна", "Игоревна", "Сергеевна", "Яновна", "Юрьевна", "Валерьевна"}

	Address_city = []string{"Москва", "Санкт-Петербург", "Сочи", "Казань", "Новосибирск", "Томск", "Калининград", "Мурманск", "Тверь", "Воронеж"}
	Address_street = []string{
		"Центральная ул",
		"Молодежная ул",
		"Школьная ул",
		"Лесная ул",
		"Садовая ул",
		"Советская ул",
		"Новая ул",
		"Набережная ул",
		"Заречная ул",
		"Зеленая ул",
		"Ленина ул",
		"пер. Бродского",
		"Кирова ул",
		"Пушкина ул",
		"Никольская ул",
		"Луговая ул",
		"Сретинский б-р",
		"Верхняя ал",
		"Ржевская ул",
		"Ленинский пр-т"}
}
